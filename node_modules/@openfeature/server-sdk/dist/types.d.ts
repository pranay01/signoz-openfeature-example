import { BaseHook, FlagValue, EvaluationContext, HookHints, EvaluationDetails, JsonValue, CommonProvider, ServerProviderStatus, Logger, ResolutionDetails, GenericEventEmitter, ServerProviderEvents, EvaluationLifeCycle, ManageContext, ManageLogger, Eventing, ClientMetadata, OpenFeatureCommonAPI, ProviderWrapper } from '@openfeature/core';
export * from '@openfeature/core';
export { ServerProviderEvents as ProviderEvents, ServerProviderStatus as ProviderStatus } from '@openfeature/core';
import { EventEmitter } from 'node:events';

type Hook = BaseHook<FlagValue, Promise<EvaluationContext | void> | EvaluationContext | void, Promise<void> | void>;

interface FlagEvaluationOptions {
    hooks?: Hook[];
    hookHints?: HookHints;
}
interface Features {
    /**
     * Performs a flag evaluation that returns a boolean.
     * @param {string} flagKey The flag key uniquely identifies a particular flag
     * @param {boolean} defaultValue The value returned if an error occurs
     * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
     * @param {FlagEvaluationOptions} options Additional flag evaluation options
     * @returns {Promise<boolean>} Flag evaluation response
     */
    getBooleanValue(flagKey: string, defaultValue: boolean, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<boolean>;
    /**
     * Performs a flag evaluation that a returns an evaluation details object.
     * @param {string} flagKey The flag key uniquely identifies a particular flag
     * @param {boolean} defaultValue The value returned if an error occurs
     * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
     * @param {FlagEvaluationOptions} options Additional flag evaluation options
     * @returns {Promise<EvaluationDetails<boolean>>} Flag evaluation details response
     */
    getBooleanDetails(flagKey: string, defaultValue: boolean, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<boolean>>;
    /**
     * Performs a flag evaluation that returns a string.
     * @param {string} flagKey The flag key uniquely identifies a particular flag
     * @template {string} T A optional generic argument constraining the string
     * @param {T} defaultValue The value returned if an error occurs
     * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
     * @param {FlagEvaluationOptions} options Additional flag evaluation options
     * @returns {Promise<T>} Flag evaluation response
     */
    getStringValue(flagKey: string, defaultValue: string, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<string>;
    getStringValue<T extends string = string>(flagKey: string, defaultValue: T, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<T>;
    /**
     * Performs a flag evaluation that a returns an evaluation details object.
     * @param {string} flagKey The flag key uniquely identifies a particular flag
     * @template {string} T A optional generic argument constraining the string
     * @param {T} defaultValue The value returned if an error occurs
     * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
     * @param {FlagEvaluationOptions} options Additional flag evaluation options
     * @returns {Promise<EvaluationDetails<T>>} Flag evaluation details response
     */
    getStringDetails(flagKey: string, defaultValue: string, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<string>>;
    getStringDetails<T extends string = string>(flagKey: string, defaultValue: T, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<T>>;
    /**
     * Performs a flag evaluation that returns a number.
     * @param {string} flagKey The flag key uniquely identifies a particular flag
     * @template {number} T A optional generic argument constraining the number
     * @param {T} defaultValue The value returned if an error occurs
     * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
     * @param {FlagEvaluationOptions} options Additional flag evaluation options
     * @returns {Promise<T>} Flag evaluation response
     */
    getNumberValue(flagKey: string, defaultValue: number, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<number>;
    getNumberValue<T extends number = number>(flagKey: string, defaultValue: T, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<T>;
    /**
     * Performs a flag evaluation that a returns an evaluation details object.
     * @param {string} flagKey The flag key uniquely identifies a particular flag
     * @template {number} T A optional generic argument constraining the number
     * @param {T} defaultValue The value returned if an error occurs
     * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
     * @param {FlagEvaluationOptions} options Additional flag evaluation options
     * @returns {Promise<EvaluationDetails<T>>} Flag evaluation details response
     */
    getNumberDetails(flagKey: string, defaultValue: number, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<number>>;
    getNumberDetails<T extends number = number>(flagKey: string, defaultValue: T, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<T>>;
    /**
     * Performs a flag evaluation that returns an object.
     * @param {string} flagKey The flag key uniquely identifies a particular flag
     * @template {JsonValue} T A optional generic argument describing the structure
     * @param {T} defaultValue The value returned if an error occurs
     * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
     * @param {FlagEvaluationOptions} options Additional flag evaluation options
     * @returns {Promise<T>} Flag evaluation response
     */
    getObjectValue(flagKey: string, defaultValue: JsonValue, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<JsonValue>;
    getObjectValue<T extends JsonValue = JsonValue>(flagKey: string, defaultValue: T, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<T>;
    /**
     * Performs a flag evaluation that a returns an evaluation details object.
     * @param {string} flagKey The flag key uniquely identifies a particular flag
     * @template {JsonValue} T A optional generic argument describing the structure
     * @param {T} defaultValue The value returned if an error occurs
     * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
     * @param {FlagEvaluationOptions} options Additional flag evaluation options
     * @returns {Promise<EvaluationDetails<T>>} Flag evaluation details response
     */
    getObjectDetails(flagKey: string, defaultValue: JsonValue, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<JsonValue>>;
    getObjectDetails<T extends JsonValue = JsonValue>(flagKey: string, defaultValue: T, context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<T>>;
}

/**
 * Interface that providers must implement to resolve flag values for their particular
 * backend or vendor.
 *
 * Implementation for resolving all the required flag types must be defined.
 */
interface Provider extends CommonProvider<ServerProviderStatus> {
    /**
     * A provider hook exposes a mechanism for provider authors to register hooks
     * to tap into various stages of the flag evaluation lifecycle. These hooks can
     * be used to perform side effects and mutate the context for purposes of the
     * provider. Provider hooks are not configured or controlled by the application author.
     */
    readonly hooks?: Hook[];
    /**
     * Resolve a boolean flag and its evaluation details.
     */
    resolveBooleanEvaluation(flagKey: string, defaultValue: boolean, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<boolean>>;
    /**
     * Resolve a string flag and its evaluation details.
     */
    resolveStringEvaluation(flagKey: string, defaultValue: string, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<string>>;
    /**
     * Resolve a numeric flag and its evaluation details.
     */
    resolveNumberEvaluation(flagKey: string, defaultValue: number, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<number>>;
    /**
     * Resolve and parse an object flag and its evaluation details.
     */
    resolveObjectEvaluation<T extends JsonValue>(flagKey: string, defaultValue: T, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<T>>;
}

/**
 * The No-op provider is set by default, and simply always returns the default value.
 */
declare class NoopFeatureProvider implements Provider {
    readonly metadata: {
        readonly name: "No-op Provider";
    };
    resolveBooleanEvaluation(_: string, defaultValue: boolean): Promise<ResolutionDetails<boolean>>;
    resolveStringEvaluation(_: string, defaultValue: string): Promise<ResolutionDetails<string>>;
    resolveNumberEvaluation(_: string, defaultValue: number): Promise<ResolutionDetails<number>>;
    resolveObjectEvaluation<T extends JsonValue>(_: string, defaultValue: T): Promise<ResolutionDetails<T>>;
    private noOp;
}
declare const NOOP_PROVIDER: NoopFeatureProvider;

/**
 * Don't export types from this file publicly.
 * It might cause confusion since these types are not a part of the general API,
 * but just for the in-memory provider.
 */

type Variants<T> = Record<string, T>;
/**
 * A Feature Flag definition, containing it's specification
 */
type Flag = {
    /**
     * An object containing all possible flags mappings (variant -> flag value)
     */
    variants: Variants<boolean> | Variants<string> | Variants<number> | Variants<JsonValue>;
    /**
     * The variant it will resolve to in STATIC evaluation
     */
    defaultVariant: string;
    /**
     * Determines if flag evaluation is enabled or not for this flag.
     * If false, falls back to the default value provided to the client
     */
    disabled: boolean;
    /**
     * Function used in order to evaluate a flag to a specific value given the provided context.
     * It should return a variant key.
     * If it does not return a valid variant it falls back to the default value provided to the client
     * @param EvaluationContext
     */
    contextEvaluator?: (ctx: EvaluationContext) => string;
};
type FlagConfiguration = Record<string, Flag>;

/**
 * A simple OpenFeature provider intended for demos and as a test stub.
 */
declare class InMemoryProvider implements Provider {
    readonly events: OpenFeatureEventEmitter;
    readonly runsOn = "server";
    readonly metadata: {
        readonly name: "in-memory";
    };
    private _flagConfiguration;
    constructor(flagConfiguration?: FlagConfiguration);
    /**
     * Overwrites the configured flags.
     * @param { FlagConfiguration } flagConfiguration new flag configuration
     */
    putConfiguration(flagConfiguration: FlagConfiguration): void;
    resolveBooleanEvaluation(flagKey: string, defaultValue: boolean, context?: EvaluationContext, logger?: Logger): Promise<ResolutionDetails<boolean>>;
    resolveNumberEvaluation(flagKey: string, defaultValue: number, context?: EvaluationContext, logger?: Logger): Promise<ResolutionDetails<number>>;
    resolveStringEvaluation(flagKey: string, defaultValue: string, context?: EvaluationContext, logger?: Logger): Promise<ResolutionDetails<string>>;
    resolveObjectEvaluation<T extends JsonValue>(flagKey: string, defaultValue: T, context?: EvaluationContext, logger?: Logger): Promise<ResolutionDetails<T>>;
    private resolveFlagWithReason;
    private lookupFlagValue;
}

/**
 * The OpenFeatureEventEmitter can be used by provider developers to emit
 * events at various parts of the provider lifecycle.
 *
 * NOTE: Ready and error events are automatically emitted by the SDK based on
 * the result of the initialize method.
 */
declare class OpenFeatureEventEmitter extends GenericEventEmitter<ServerProviderEvents> {
    protected readonly eventEmitter: EventEmitter<[never]>;
    constructor();
}

interface Client extends EvaluationLifeCycle<Client>, Features, ManageContext<Client>, ManageLogger<Client>, Eventing<ServerProviderEvents> {
    readonly metadata: ClientMetadata;
    /**
     * Returns the status of the associated provider.
     */
    readonly providerStatus: ServerProviderStatus;
}

/**
 * Transaction context is a mechanism for adding transaction specific context that
 * is merged with evaluation context prior to flag evaluation. Examples of potential
 * transaction specific context include: a user id, user agent, or request path.
 */
type TransactionContext = EvaluationContext;
interface ManageTransactionContextPropagator<T> extends TransactionContextPropagator {
    /**
     * Sets a transaction context propagator on this receiver. The transaction context
     * propagator is responsible for persisting context for the duration of a single
     * transaction.
     * @template T The type of the receiver
     * @param {TransactionContextPropagator} transactionContextPropagator The context propagator to be used
     * @returns {T} The receiver (this object)
     */
    setTransactionContextPropagator(transactionContextPropagator: TransactionContextPropagator): T;
}
interface TransactionContextPropagator {
    /**
     * Returns the currently defined transaction context using the registered transaction
     * context propagator.
     * @returns {TransactionContext} The current transaction context
     */
    getTransactionContext(): TransactionContext;
    /**
     * Sets the transaction context using the registered transaction context propagator.
     * Runs the {@link callback} function, in which the {@link transactionContext} will be available by calling
     * {@link this#getTransactionContext}.
     *
     * The {@link TransactionContextPropagator} must persist the {@link transactionContext} and make it available
     * to {@link callback} via {@link this#getTransactionContext}.
     *
     * The precedence of merging context can be seen in {@link https://openfeature.dev/specification/sections/evaluation-context#requirement-323 the specification}.
     *
     * Example:
     *
     * ```js
     * app.use((req: Request, res: Response, next: NextFunction) => {
     *     const ip = res.headers.get("X-Forwarded-For")
     *     OpenFeature.setTransactionContext({ targetingKey: req.user.id, ipAddress: ip }, () => {
     *         // The transaction context is used in any flag evaluation throughout the whole call chain of next
     *         next();
     *     });
     * })
     *
     * ```
     * @template TArgs The optional args passed to the callback function
     * @template R The return value of the callback
     * @param {TransactionContext} transactionContext The transaction specific context
     * @param {(...args: unknown[]) => R} callback Callback function to run
     * @param {...unknown[]} args Optional arguments that are passed to the callback function
     */
    setTransactionContext<TArgs extends unknown[], R>(transactionContext: TransactionContext, callback: (...args: TArgs) => R, ...args: TArgs): void;
}

declare class NoopTransactionContextPropagator implements TransactionContextPropagator {
    getTransactionContext(): EvaluationContext;
    setTransactionContext<TArgs extends unknown[], R>(_: TransactionContext, callback: (...args: TArgs) => R, ...args: TArgs): void;
}
declare const NOOP_TRANSACTION_CONTEXT_PROPAGATOR: NoopTransactionContextPropagator;

declare class AsyncLocalStorageTransactionContextPropagator implements TransactionContextPropagator {
    private asyncLocalStorage;
    getTransactionContext(): EvaluationContext;
    setTransactionContext<TArgs extends unknown[], R>(transactionContext: TransactionContext, callback: (...args: TArgs) => R, ...args: TArgs): void;
}

declare class OpenFeatureAPI extends OpenFeatureCommonAPI<ServerProviderStatus, Provider, Hook> implements ManageContext<OpenFeatureAPI>, ManageTransactionContextPropagator<OpenFeatureCommonAPI<ServerProviderStatus, Provider>> {
    protected _statusEnumType: typeof ServerProviderStatus;
    protected _apiEmitter: OpenFeatureEventEmitter;
    protected _defaultProvider: ProviderWrapper<Provider, ServerProviderStatus>;
    protected _domainScopedProviders: Map<string, ProviderWrapper<Provider, ServerProviderStatus>>;
    protected _createEventEmitter: () => OpenFeatureEventEmitter;
    private _transactionContextPropagator;
    private constructor();
    /**
     * Gets a singleton instance of the OpenFeature API.
     * @ignore
     * @returns {OpenFeatureAPI} OpenFeature API
     */
    static getInstance(): OpenFeatureAPI;
    private getProviderStatus;
    /**
     * Sets the default provider for flag evaluations and returns a promise that resolves when the provider is ready.
     * This provider will be used by domainless clients and clients associated with domains to which no provider is bound.
     * Setting a provider supersedes the current provider used in new and existing unbound clients.
     * @param {Provider} provider The provider responsible for flag evaluations.
     * @returns {Promise<void>}
     * @throws Uncaught exceptions thrown by the provider during initialization.
     */
    setProviderAndWait(provider: Provider): Promise<void>;
    /**
     * Sets the provider that OpenFeature will use for flag evaluations on clients bound to the same domain.
     * A promise is returned that resolves when the provider is ready.
     * Setting a provider supersedes the current provider used in new and existing clients bound to the same domain.
     * @param {string} domain The name to identify the client
     * @param {Provider} provider The provider responsible for flag evaluations.
     * @returns {Promise<void>}
     * @throws Uncaught exceptions thrown by the provider during initialization.
     */
    setProviderAndWait(domain: string, provider: Provider): Promise<void>;
    /**
     * Sets the default provider for flag evaluations.
     * This provider will be used by domainless clients and clients associated with domains to which no provider is bound.
     * Setting a provider supersedes the current provider used in new and existing unbound clients.
     * @param {Provider} provider The provider responsible for flag evaluations.
     * @returns {this} OpenFeature API
     */
    setProvider(provider: Provider): this;
    /**
     * Sets the provider for flag evaluations of providers with the given name.
     * Setting a provider supersedes the current provider used in new and existing clients bound to the same domain.
     * @param {string} domain The name to identify the client
     * @param {Provider} provider The provider responsible for flag evaluations.
     * @returns {this} OpenFeature API
     */
    setProvider(domain: string, provider: Provider): this;
    setContext(context: EvaluationContext): this;
    getContext(): EvaluationContext;
    /**
     * A factory function for creating new domainless OpenFeature clients.
     * Clients can contain their own state (e.g. logger, hook, context).
     * Multiple clients can be used to segment feature flag configuration.
     *
     * All domainless or unbound clients use the default provider set via {@link this.setProvider setProvider}.
     * @param {EvaluationContext} context Evaluation context that should be set on the client to used during flag evaluations
     * @returns {Client} OpenFeature Client
     */
    getClient(context?: EvaluationContext): Client;
    /**
     * A factory function for creating new domain scoped OpenFeature clients.
     * Clients can contain their own state (e.g. logger, hook, context).
     * Multiple clients can be used to segment feature flag configuration.
     *
     * If there is already a provider bound to this domain via {@link this.setProvider setProvider}, this provider will be used.
     * Otherwise, the default provider is used until a provider is assigned to that domain.
     * @param {string} domain An identifier which logically binds clients with providers
     * @param {EvaluationContext} context Evaluation context that should be set on the client to used during flag evaluations
     * @returns {Client} OpenFeature Client
     */
    getClient(domain: string, context?: EvaluationContext): Client;
    /**
     * A factory function for creating new domain scoped OpenFeature clients.
     * Clients can contain their own state (e.g. logger, hook, context).
     * Multiple clients can be used to segment feature flag configuration.
     *
     * If there is already a provider bound to this domain via {@link this.setProvider setProvider}, this provider will be used.
     * Otherwise, the default provider is used until a provider is assigned to that domain.
     * @param {string} domain An identifier which logically binds clients with providers
     * @param {string} version The version of the client (only used for metadata)
     * @param {EvaluationContext} context Evaluation context that should be set on the client to used during flag evaluations
     * @returns {Client} OpenFeature Client
     */
    getClient(domain: string, version: string, context?: EvaluationContext): Client;
    /**
     * Clears all registered providers and resets the default provider.
     * @returns {Promise<void>}
     */
    clearProviders(): Promise<void>;
    setTransactionContextPropagator(transactionContextPropagator: TransactionContextPropagator): OpenFeatureCommonAPI<ServerProviderStatus, Provider>;
    setTransactionContext<TArgs extends unknown[], R>(transactionContext: TransactionContext, callback: (...args: TArgs) => R, ...args: TArgs): void;
    getTransactionContext(): TransactionContext;
}
/**
 * A singleton instance of the OpenFeature API.
 * @returns {OpenFeatureAPI} OpenFeature API
 */
declare const OpenFeature: OpenFeatureAPI;

export { AsyncLocalStorageTransactionContextPropagator, Client, Features, FlagEvaluationOptions, Hook, InMemoryProvider, ManageTransactionContextPropagator, NOOP_PROVIDER, NOOP_TRANSACTION_CONTEXT_PROPAGATOR, OpenFeature, OpenFeatureAPI, OpenFeatureEventEmitter, Provider, TransactionContext, TransactionContextPropagator };
