"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class FlagsStateBuilder {
    constructor(valid, withReasons) {
        this.valid = valid;
        this.withReasons = withReasons;
        this.flagValues = {};
        this.flagMetadata = {};
    }
    addFlag(flag, value, variation, reason, trackEvents, trackReason, detailsOnlyIfTracked) {
        this.flagValues[flag.key] = value;
        const meta = {};
        if (variation !== undefined) {
            meta.variation = variation;
        }
        const omitDetails = detailsOnlyIfTracked &&
            !trackEvents &&
            !trackReason &&
            flag.debugEventsUntilDate === undefined; // 0 probably doesn't matter.
        if (!omitDetails) {
            meta.version = flag.version;
        }
        if (reason && (trackReason || (this.withReasons && !omitDetails))) {
            meta.reason = reason;
        }
        if (trackEvents) {
            meta.trackEvents = true;
        }
        if (trackReason) {
            meta.trackReason = true;
        }
        if (flag.debugEventsUntilDate !== undefined) {
            meta.debugEventsUntilDate = flag.debugEventsUntilDate;
        }
        this.flagMetadata[flag.key] = meta;
    }
    build() {
        const state = this;
        return {
            valid: state.valid,
            allValues: () => state.flagValues,
            getFlagValue: (key) => state.flagValues[key],
            getFlagReason: (key) => { var _a; return (_a = (state.flagMetadata[key] ? state.flagMetadata[key].reason : null)) !== null && _a !== void 0 ? _a : null; },
            toJSON: () => (Object.assign(Object.assign({}, state.flagValues), { $flagsState: state.flagMetadata, $valid: state.valid })),
        };
    }
}
exports.default = FlagsStateBuilder;
//# sourceMappingURL=FlagsStateBuilder.js.map