import { AttributeReference, Context, Crypto } from '@launchdarkly/js-sdk-common';
export default class Bucketer {
    private crypto;
    constructor(crypto: Crypto);
    private sha1Hex;
    /**
     * Bucket the provided context using the provided parameters.
     * @param context The context to bucket. Can be a 'multi' kind context, but
     * the bucketing will be by a specific contained kind.
     * @param key A key to use in hashing. Typically the flag key or the segment key.
     * @param attr The attribute to use for bucketing.
     * @param salt A salt to use in hashing.
     * @param kindForRollout The kind to use for bucketing.
     * @param seed A seed to use in hashing.
     *
     * @returns A tuple where the first value is the bucket, and the second value indicates if there
     * was a context for the value specified by `kindForRollout`. If there was not a context for the
     * specified kind, then the `inExperiment` attribute should be `false`.
     */
    bucket(context: Context, key: string, attr: AttributeReference, salt: string, kindForRollout?: string, seed?: number): [number, boolean];
}
//# sourceMappingURL=Bucketer.d.ts.map