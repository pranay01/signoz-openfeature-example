/// <reference types="node" />
import { EventEmitter } from 'events';
import { BigSegmentStoreStatusProviderImpl, interfaces } from '@launchdarkly/js-server-sdk-common';
/**
 * @ignore
 */
declare class BigSegmentStoreStatusProviderNode implements interfaces.BigSegmentStoreStatusProvider {
    private readonly provider;
    emitter: EventEmitter;
    constructor(provider: BigSegmentStoreStatusProviderImpl);
    getStatus(): interfaces.BigSegmentStoreStatus | undefined;
    requireStatus(): Promise<interfaces.BigSegmentStoreStatus>;
    dispatch(eventType: string, status: interfaces.BigSegmentStoreStatus): void;
    on(event: string | symbol, listener: (...args: any[]) => void): this;
}
declare const _default: {
    new (...args: any[]): {
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
        emitter: EventEmitter<[never]>;
    };
} & typeof BigSegmentStoreStatusProviderNode;
export default _default;
//# sourceMappingURL=BigSegmentsStoreStatusProviderNode.d.ts.map