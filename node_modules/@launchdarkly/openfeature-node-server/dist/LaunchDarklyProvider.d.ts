import { EvaluationContext, Hook, JsonValue, OpenFeatureEventEmitter, Paradigm, Provider, ProviderMetadata, ResolutionDetails } from '@openfeature/server-sdk';
import { LDClient, LDOptions } from '@launchdarkly/node-server-sdk';
/**
 * An OpenFeature provider for the LaunchDarkly SDK for node.
 */
export default class LaunchDarklyProvider implements Provider {
    private initTimeoutSeconds;
    private readonly logger;
    private readonly client;
    private readonly clientConstructionError;
    readonly metadata: ProviderMetadata;
    readonly runsOn?: Paradigm;
    readonly events: OpenFeatureEventEmitter;
    /**
     * Construct a {@link LaunchDarklyProvider}.
     * @param sdkKey The SDK key.
     * @param options Any options for the SDK.
     * @param initTimeoutSeconds The default amount of time to wait for initialization in seconds.
     * Defaults to 10 seconds.
     */
    constructor(sdkKey: string, options?: LDOptions, initTimeoutSeconds?: number);
    initialize(context?: EvaluationContext): Promise<void>;
    /**
     * Determines the boolean variation of a feature flag for a context, along with information about
     * how it was calculated.
     *
     * If the flag does not evaluate to a boolean value, then the defaultValue will be returned.
     *
     * @param flagKey The unique key of the feature flag.
     * @param defaultValue The default value of the flag, to be used if the value is not available
     *   from LaunchDarkly.
     * @param context The context requesting the flag. The client will generate an analytics event to
     *   register this context with LaunchDarkly if the context does not already exist.
     * @returns A promise which will resolve to a ResolutionDetails.
     */
    resolveBooleanEvaluation(flagKey: string, defaultValue: boolean, context: EvaluationContext): Promise<ResolutionDetails<boolean>>;
    /**
     * Determines the string variation of a feature flag for a context, along with information about
     * how it was calculated.
     *
     * If the flag does not evaluate to a string value, then the defaultValue will be returned.
     *
     * @param flagKey The unique key of the feature flag.
     * @param defaultValue The default value of the flag, to be used if the value is not available
     *   from LaunchDarkly.
     * @param context The context requesting the flag. The client will generate an analytics event to
     *   register this context with LaunchDarkly if the context does not already exist.
     * @returns A promise which will resolve to a ResolutionDetails.
     */
    resolveStringEvaluation(flagKey: string, defaultValue: string, context: EvaluationContext): Promise<ResolutionDetails<string>>;
    /**
     * Determines the numeric variation of a feature flag for a context, along with information about
     * how it was calculated.
     *
     * If the flag does not evaluate to a numeric value, then the defaultValue will be returned.
     *
     * @param flagKey The unique key of the feature flag.
     * @param defaultValue The default value of the flag, to be used if the value is not available
     *   from LaunchDarkly.
     * @param context The context requesting the flag. The client will generate an analytics event to
     *   register this context with LaunchDarkly if the context does not already exist.
     * @returns A promise which will resolve to a ResolutionDetails.
     */
    resolveNumberEvaluation(flagKey: string, defaultValue: number, context: EvaluationContext): Promise<ResolutionDetails<number>>;
    /**
     * Determines the object variation of a feature flag for a context, along with information about
     * how it was calculated.
     *
     * @param flagKey The unique key of the feature flag.
     * @param defaultValue The default value of the flag, to be used if the value is not available
     *   from LaunchDarkly.
     * @param context The context requesting the flag. The client will generate an analytics event to
     *   register this context with LaunchDarkly if the context does not already exist.
     * @returns A promise which will resolve to a ResolutionDetails.
     */
    resolveObjectEvaluation<U extends JsonValue>(flagKey: string, defaultValue: U, context: EvaluationContext): Promise<ResolutionDetails<U>>;
    get hooks(): Hook[];
    private translateContext;
    /**
     * Get the LDClient instance used by this provider.
     *
     * @returns The client for this provider.
     */
    getClient(): LDClient;
    /**
     * Called by OpenFeature when it needs to close the provider. This will flush
     * events from the LDClient and then close it.
     */
    onClose(): Promise<void>;
}
//# sourceMappingURL=LaunchDarklyProvider.d.ts.map