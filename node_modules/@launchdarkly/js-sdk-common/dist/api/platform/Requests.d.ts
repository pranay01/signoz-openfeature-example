import type { EventSource, EventSourceInitDict } from './EventSource';
/**
 * Interface for headers that are part of a fetch response.
 */
export interface Headers {
    /**
     * Get a header by name.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get
     *
     * @param name The name of the header to get.
     */
    get(name: string): string | null;
    /**
     * Returns an iterator allowing iteration of all the keys contained
     * in this object.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/Headers/keys
     *
     */
    keys(): Iterable<string>;
    /**
     * Returns an iterator allowing iteration of all the values contained
     * in this object.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/Headers/values
     */
    values(): Iterable<string>;
    /**
     * Returns an iterator allowing iteration of all the key-value pairs in
     * the object.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/Headers/entries
     */
    entries(): Iterable<[string, string]>;
    /**
     * Returns true if the header is present.
     * @param name The name of the header to check.
     */
    has(name: string): boolean;
}
/**
 * Interface for fetch responses.
 */
export interface Response {
    headers: Headers;
    status: number;
    /**
     * Read the response and provide it as a string.
     */
    text(): Promise<string>;
    /**
     * Read the response and provide it as decoded json.
     */
    json(): Promise<any>;
}
export interface Options {
    headers?: Record<string, string>;
    method?: string;
    body?: string;
    timeout?: number;
}
export interface Requests {
    fetch(url: string, options?: Options): Promise<Response>;
    createEventSource(url: string, eventSourceInitDict: EventSourceInitDict): EventSource;
    /**
     * Returns true if a proxy is configured.
     */
    usingProxy?(): boolean;
    /**
     * Returns true if the proxy uses authentication.
     */
    usingProxyAuth?(): boolean;
}
export interface HttpErrorResponse {
    message: string;
    status?: number;
}
//# sourceMappingURL=Requests.d.ts.map