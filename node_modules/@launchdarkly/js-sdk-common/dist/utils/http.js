"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.base64UrlEncode = exports.shouldRetry = exports.httpErrorMessage = exports.defaultHeaders = void 0;
const errors_1 = require("../errors");
function defaultHeaders(sdkKey, info, tags, includeAuthorizationHeader = true) {
    const { userAgentBase, version, wrapperName, wrapperVersion } = info.sdkData();
    const headers = {
        'user-agent': `${userAgentBase !== null && userAgentBase !== void 0 ? userAgentBase : 'NodeJSClient'}/${version}`,
    };
    // edge sdks sets this to false because they use the clientSideID
    // and they don't need the authorization header
    if (includeAuthorizationHeader) {
        headers.authorization = sdkKey;
    }
    if (wrapperName) {
        headers['x-launchdarkly-wrapper'] = wrapperVersion
            ? `${wrapperName}/${wrapperVersion}`
            : wrapperName;
    }
    if (tags === null || tags === void 0 ? void 0 : tags.value) {
        headers['x-launchdarkly-tags'] = tags.value;
    }
    return headers;
}
exports.defaultHeaders = defaultHeaders;
function httpErrorMessage(err, context, retryMessage) {
    let desc;
    if (err.status) {
        desc = `error ${err.status}${err.status === 401 ? ' (invalid SDK key)' : ''}`;
    }
    else {
        desc = `I/O error (${err.message || 'unknown error'})`;
    }
    const action = retryMessage !== null && retryMessage !== void 0 ? retryMessage : 'giving up permanently';
    return `Received ${desc} for ${context} - ${action}`;
}
exports.httpErrorMessage = httpErrorMessage;
function shouldRetry({ status }) {
    return status ? (0, errors_1.isHttpRecoverable)(status) : true;
}
exports.shouldRetry = shouldRetry;
/**
 * In react-native use base64-js to polyfill btoa. This is safe
 * because the react-native repo uses it too. Set the global.btoa to the encode
 * function of base64-js.
 * https://github.com/beatgammit/base64-js
 * https://github.com/axios/axios/issues/2235#issuecomment-512204616
 *
 * Ripped from https://thewoods.blog/base64url/
 */
const base64UrlEncode = (s, encoding) => encoding.btoa(s).replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
exports.base64UrlEncode = base64UrlEncode;
//# sourceMappingURL=http.js.map