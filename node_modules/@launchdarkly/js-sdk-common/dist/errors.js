"use strict";
// These classes are of trivial complexity. If they become
// more complex, then they could be independent files.
/* eslint-disable max-classes-per-file */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHttpLocallyRecoverable = exports.isHttpRecoverable = exports.LDTimeoutError = exports.LDClientError = exports.LDUnexpectedResponseError = exports.LDStreamingError = exports.LDPollingError = exports.LDFileDataSourceError = void 0;
class LDFileDataSourceError extends Error {
    constructor(message) {
        super(message);
        this.name = 'LaunchDarklyFileDataSourceError';
    }
}
exports.LDFileDataSourceError = LDFileDataSourceError;
class LDPollingError extends Error {
    constructor(message, status) {
        super(message);
        this.status = status;
        this.name = 'LaunchDarklyPollingError';
    }
}
exports.LDPollingError = LDPollingError;
class LDStreamingError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
        this.name = 'LaunchDarklyStreamingError';
    }
}
exports.LDStreamingError = LDStreamingError;
class LDUnexpectedResponseError extends Error {
    constructor(message) {
        super(message);
        this.name = 'LaunchDarklyUnexpectedResponseError';
    }
}
exports.LDUnexpectedResponseError = LDUnexpectedResponseError;
class LDClientError extends Error {
    constructor(message) {
        super(message);
        this.name = 'LaunchDarklyClientError';
    }
}
exports.LDClientError = LDClientError;
class LDTimeoutError extends Error {
    constructor(message) {
        super(message);
        this.name = 'LaunchDarklyTimeoutError';
    }
}
exports.LDTimeoutError = LDTimeoutError;
/**
 * Check if the HTTP error is recoverable. This will return false if a request
 * made with any payload could not recover. If the reason for the failure
 * is payload specific, for instance a payload that is too large, then
 * it could recover with a different payload.
 */
function isHttpRecoverable(status) {
    if (status >= 400 && status < 500) {
        return status === 400 || status === 408 || status === 429;
    }
    return true;
}
exports.isHttpRecoverable = isHttpRecoverable;
/**
 * Returns true if the status could recover for a different payload.
 *
 * When used with event processing this indicates that we should discard
 * the payload, but that a subsequent payload may succeed. Therefore we should
 * not stop event processing.
 */
function isHttpLocallyRecoverable(status) {
    if (status === 413) {
        return true;
    }
    return isHttpRecoverable(status);
}
exports.isHttpLocallyRecoverable = isHttpLocallyRecoverable;
//# sourceMappingURL=errors.js.map