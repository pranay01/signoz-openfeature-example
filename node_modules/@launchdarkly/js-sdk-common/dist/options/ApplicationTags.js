"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const validators_1 = require("../validators");
const OptionMessages_1 = require("./OptionMessages");
/**
 * Expression to validate characters that are allowed in tag keys and values.
 */
const allowedTagCharacters = /^(\w|\.|-)+$/;
const regexValidator = validators_1.TypeValidators.stringMatchingRegex(allowedTagCharacters);
const tagValidator = {
    is: (u, name) => {
        if (regexValidator.is(u)) {
            if (u.length > 64) {
                return { valid: false, message: OptionMessages_1.default.tagValueTooLong(name) };
            }
            return { valid: true };
        }
        return { valid: false, message: OptionMessages_1.default.invalidTagValue(name) };
    },
};
/**
 * Class for managing tags.
 */
class ApplicationTags {
    constructor(options) {
        const tags = {};
        const application = options === null || options === void 0 ? void 0 : options.application;
        const logger = options === null || options === void 0 ? void 0 : options.logger;
        if (application) {
            Object.entries(application).forEach(([key, value]) => {
                if (value !== null && value !== undefined) {
                    const { valid, message } = tagValidator.is(value, `application.${key}`);
                    if (!valid) {
                        logger === null || logger === void 0 ? void 0 : logger.warn(message);
                    }
                    else if (key === 'versionName') {
                        tags[`application-version-name`] = [value];
                    }
                    else {
                        tags[`application-${key}`] = [value];
                    }
                }
            });
        }
        const tagKeys = Object.keys(tags);
        if (tagKeys.length) {
            this.value = tagKeys
                .sort()
                .flatMap((key) => tags[key].sort().map((value) => `${key}/${value}`))
                .join(' ');
        }
    }
}
exports.default = ApplicationTags;
//# sourceMappingURL=ApplicationTags.js.map