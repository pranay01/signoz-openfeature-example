"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const guards_1 = require("./guards");
const SummaryCounter_1 = require("./SummaryCounter");
function counterKey(event) {
    return `${event.key}:${event.variation !== null && event.variation !== undefined ? event.variation : ''}:${event.version !== null && event.version !== undefined ? event.version : ''}`;
}
/**
 * @internal
 */
class EventSummarizer {
    constructor() {
        this.startDate = 0;
        this.endDate = 0;
        this.counters = {};
        this.contextKinds = {};
    }
    summarizeEvent(event) {
        if ((0, guards_1.isFeature)(event) && !event.excludeFromSummaries) {
            const countKey = counterKey(event);
            const counter = this.counters[countKey];
            let kinds = this.contextKinds[event.key];
            if (!kinds) {
                kinds = new Set();
                this.contextKinds[event.key] = kinds;
            }
            event.context.kinds.forEach((kind) => kinds.add(kind));
            if (counter) {
                counter.increment();
            }
            else {
                this.counters[countKey] = new SummaryCounter_1.default(1, event.key, event.value, event.default, event.version, event.variation);
            }
            if (this.startDate === 0 || event.creationDate < this.startDate) {
                this.startDate = event.creationDate;
            }
            if (event.creationDate > this.endDate) {
                this.endDate = event.creationDate;
            }
        }
    }
    getSummary() {
        const features = Object.values(this.counters).reduce((acc, counter) => {
            let flagSummary = acc[counter.key];
            if (!flagSummary) {
                flagSummary = {
                    default: counter.default,
                    counters: [],
                    contextKinds: [...this.contextKinds[counter.key]],
                };
                acc[counter.key] = flagSummary;
            }
            const counterOut = {
                value: counter.value,
                count: counter.count,
            };
            if (counter.variation !== undefined && counter.variation !== null) {
                counterOut.variation = counter.variation;
            }
            if (counter.version !== undefined && counter.version !== null) {
                counterOut.version = counter.version;
            }
            else {
                counterOut.unknown = true;
            }
            flagSummary.counters.push(counterOut);
            return acc;
        }, {});
        return {
            startDate: this.startDate,
            endDate: this.endDate,
            features,
            kind: 'summary',
        };
    }
    clearSummary() {
        this.startDate = 0;
        this.endDate = 0;
        this.counters = {};
        this.contextKinds = {};
    }
}
exports.default = EventSummarizer;
//# sourceMappingURL=EventSummarizer.js.map