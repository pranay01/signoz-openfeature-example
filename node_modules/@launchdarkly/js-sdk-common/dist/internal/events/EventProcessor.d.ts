import LDContextDeduplicator from '../../api/subsystem/LDContextDeduplicator';
import LDEventProcessor from '../../api/subsystem/LDEventProcessor';
import { ClientContext } from '../../options';
import { DiagnosticsManager } from '../diagnostics';
import InputEvent from './InputEvent';
export interface EventProcessorOptions {
    allAttributesPrivate: boolean;
    privateAttributes: string[];
    eventsCapacity: number;
    flushInterval: number;
    diagnosticRecordingInterval: number;
}
export default class EventProcessor implements LDEventProcessor {
    private readonly config;
    private readonly contextDeduplicator?;
    private readonly diagnosticsManager?;
    private eventSender;
    private summarizer;
    private queue;
    private lastKnownPastTime;
    private droppedEvents;
    private deduplicatedUsers;
    private exceededCapacity;
    private eventsInLastBatch;
    private shutdown;
    private capacity;
    private logger?;
    private contextFilter;
    private diagnosticsTimer;
    private flushTimer;
    private flushUsersTimer;
    constructor(config: EventProcessorOptions, clientContext: ClientContext, contextDeduplicator?: LDContextDeduplicator | undefined, diagnosticsManager?: DiagnosticsManager | undefined, start?: boolean);
    start(): void;
    private postDiagnosticEvent;
    close(): void;
    flush(): Promise<void>;
    sendEvent(inputEvent: InputEvent): void;
    private makeOutputEvent;
    private enqueue;
    private shouldDebugEvent;
    private tryPostingEvents;
}
//# sourceMappingURL=EventProcessor.d.ts.map