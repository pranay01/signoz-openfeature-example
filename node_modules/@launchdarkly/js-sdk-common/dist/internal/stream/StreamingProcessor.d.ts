import { EventName, ProcessStreamResponse } from '../../api';
import { LDStreamProcessor } from '../../api/subsystem';
import { ClientContext } from '../../options';
import { DiagnosticsManager } from '../diagnostics';
import { StreamingErrorHandler } from './types';
declare class StreamingProcessor implements LDStreamProcessor {
    private readonly listeners;
    private readonly diagnosticsManager?;
    private readonly errorHandler?;
    private readonly streamInitialReconnectDelay;
    private readonly headers;
    private readonly streamUri;
    private readonly logger?;
    private eventSource?;
    private requests;
    private connectionAttemptStartTime?;
    constructor(sdkKey: string, clientContext: ClientContext, streamUriPath: string, listeners: Map<EventName, ProcessStreamResponse>, diagnosticsManager?: DiagnosticsManager | undefined, errorHandler?: StreamingErrorHandler | undefined, streamInitialReconnectDelay?: number);
    private logConnectionStarted;
    private logConnectionResult;
    /**
     * This is a wrapper around the passed errorHandler which adds additional
     * diagnostics and logging logic.
     *
     * @param err The error to be logged and handled.
     * @return boolean whether to retry the connection.
     *
     * @private
     */
    private retryAndHandleError;
    start(): void;
    stop(): void;
    close(): void;
}
export default StreamingProcessor;
//# sourceMappingURL=StreamingProcessor.d.ts.map